image: $CI_REGISTRY/signageos/docker-node:12.16.1-alpine-build-zip-vips-ffmpeg
services:
  - docker:dind

stages:
  - prepare
  - test
  - prebuild
  - build
  - publish:alpine
  - publish:npm
  - release

cache:
  key: "$CI_PROJECT_ID"
  paths:
    - node_modules/

before_script:
  - npm config set unsafe-perm true
  - export VERSION=`cat ./VERSION`
  - export TAG=$([ "$CI_COMMIT_TAG" == "" ] && echo $CI_COMMIT_REF_NAME || echo $(echo ${VERSION}-latest | sed -E 's/^[0-9]+.[0-9]+.[0-9]+-([a-zA-Z0-9]+)(\.[0-9]+)?(-[a-zA-Z0-9]+)?$/\1/p' | tail -n1))
  - tools/npm-login.sh
  - npx @signageos/lib@just-tools version-upgrade $VERSION
  - npm install

prepare:
  image: $CI_REGISTRY/signageos/docker:master
  stage: prepare
  before_script: []
  script:
    - ci-prepare
  artifacts:
    when: on_success
    paths:
      - ./VERSION

test:general:
  stage: test
  except:
    - tags
  variables:
    fs_root_path: /test_fs
    fs_system_path: /test_system_fs
  script:
    - npm test

test:lint:
  stage: test
  except:
    - tags
  script:
    - if [ `find test* -type f -print0 | xargs -0 grep "\.only" | wc -l` -gt 0 ]; then echo "You forgot the .only in tests" && exit 1; fi
    - npm run lint

test:changelog:
  image: $CI_REGISTRY/signageos/docker:master
  stage: test
  except:
    - tags
  allow_failure: true
  script:
    - ci-test-changelog

prebuild:
  stage: prebuild
  dependencies:
    - prepare
  script:
    - npm run build --production
  artifacts:
    when: on_success
    paths:
      - dist/

.build:alpine:
  stage: build
  dependencies:
    - prepare
    - prebuild
  before_script: []
  script:
    - sudo apk update
    - rm -rf ~/packages
    - export VERSION=`cat ./VERSION`
    - npx @signageos/lib@just-tools version-upgrade $VERSION
    - export VERSION=`echo $VERSION | sed -r 's/-[^.]+//g' | sed -r 's/\+.+//g'` # omit branch version
    - make apk
    - mkdir -p packages/signageos-display-linux/$ARCHITECTURE
    - cp ~/packages/dist/$ARCHITECTURE/signageos-display-linux*-$VERSION-r0.apk packages/signageos-display-linux/$ARCHITECTURE
  artifacts:
    when: on_success
    paths:
      - packages/signageos-display-linux/$ARCHITECTURE

build:alpine-armhf:
  extends: .build:alpine
  tags:
    - alpine
    - armhf
  variables:
    ARCHITECTURE: armhf

build:alpine-armv7:
  allow_failure: true
  extends: .build:alpine
  tags:
    - alpine
    - armv7
  variables:
    ARCHITECTURE: armv7

build:alpine-aarch64:
  allow_failure: true
  extends: .build:alpine
  tags:
    - alpine
    - aarch64
  variables:
    ARCHITECTURE: aarch64

.publish:alpine:
  image: $CI_REGISTRY/signageos/docker-alpine:master
  stage: publish:alpine
  before_script: []
  script:
    - aws s3 cp packages/signageos-display-linux/$ARCHITECTURE "$AWS_ALPINE_REPO_S3_PATH/$ARCHITECTURE" --recursive --exclude "*" --include "signageos-display-linux*-r0.apk"

publish:alpine-armhf:
  extends: .publish:alpine
  dependencies:
    - build:alpine-armhf
  variables:
    ARCHITECTURE: armhf

publish:alpine-armv7:
  allow_failure: true
  extends: .publish:alpine
  dependencies:
    - build:alpine-armv7
  variables:
    ARCHITECTURE: armv7

publish:alpine-aarch64:
  allow_failure: true
  extends: .publish:alpine
  dependencies:
    - build:alpine-aarch64
  variables:
    ARCHITECTURE: aarch64

publish:npm:
  stage: publish:npm
  dependencies:
    - prepare
    - prebuild
  script:
    - npm publish --ignore-scripts --tag $TAG

release:tag:
  image: $CI_REGISTRY/signageos/docker:master
  stage: release
  only:
    - master
  when: manual
  allow_failure: false
  before_script: []
  script:
    - ci-release-tag

release:notes:
  image: $CI_REGISTRY/signageos/docker:master
  stage: release
  only:
    - tags
  script:
    - ci-release-notes
